{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["\"use strict\";\nclass Workout {\n    date = new Date();\n    id = (Date.now() + \"\").slice(-10);\n    clicks = 0;\n    constructor(coords, distance, duration){\n        // this.date = ...\n        // this.id = ...\n        this.coords = coords; // [lat, lng]\n        this.distance = distance; // in km\n        this.duration = duration; // in min\n    }\n    _setDescription() {\n        // prettier-ignore\n        const months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ];\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n    click() {\n        this.clicks++;\n    }\n}\nclass Running extends Workout {\n    type = \"running\";\n    constructor(coords, distance, duration, cadence){\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        // min/km\n        this.pace = this.duration / this.distance;\n        return this.pace;\n    }\n}\nclass Cycling extends Workout {\n    type = \"cycling\";\n    constructor(coords, distance, duration, elevationGain){\n        super(coords, distance, duration);\n        this.elevationGain = elevationGain;\n        // this.type = 'cycling';\n        this.calcSpeed();\n        this._setDescription();\n    }\n    calcSpeed() {\n        // km/h\n        this.speed = this.distance / (this.duration / 60);\n        return this.speed;\n    }\n}\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n///////////////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector(\".form\");\nconst containerWorkouts = document.querySelector(\".workouts\");\nconst inputType = document.querySelector(\".form__input--type\");\nconst inputDistance = document.querySelector(\".form__input--distance\");\nconst inputDuration = document.querySelector(\".form__input--duration\");\nconst inputCadence = document.querySelector(\".form__input--cadence\");\nconst inputElevation = document.querySelector(\".form__input--elevation\");\nconst closeformbtn = document.getElementById(\"delete\");\nconst DeleteAllWorkouts = document.getElementById(\"DeleteALL\");\nclass App {\n    #map;\n    #mapZoomLevel = 13;\n    #mapEvent;\n    #workouts = [];\n    constructor(){\n        // Get user's position\n        this._getPosition();\n        // Get data from local storage\n        this._getLocalStorage();\n        // Attach event handlers\n        form.addEventListener(\"submit\", this._newWorkout.bind(this));\n        inputType.addEventListener(\"change\", this._toggleElevationField);\n        containerWorkouts.addEventListener(\"click\", this._moveToPopup.bind(this));\n        closeformbtn.addEventListener(\"click\", this._hideForm.bind(this));\n        document.addEventListener(\"DOMContentLoaded\", ()=>{\n            debugger;\n            const deleteEle = document.querySelectorAll(\"#deletebtn\");\n            deleteEle.forEach((x)=>{\n                x.addEventListener(\"click\", this._DeleteWorkout.bind(this));\n            });\n        });\n    }\n    _getPosition() {\n        if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function() {\n            alert(\"Could not get your position\");\n        });\n    }\n    _loadMap(position) {\n        const { latitude } = position.coords;\n        const { longitude } = position.coords;\n        // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n        const coords = [\n            latitude,\n            longitude\n        ];\n        this.#map = L.map(\"map\").setView(coords, this.#mapZoomLevel);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        // Handling clicks on map\n        this.#map.on(\"click\", this._showForm.bind(this));\n        this.#workouts.forEach((work)=>{\n            this._renderWorkoutMarker(work);\n        });\n    }\n    _showForm(mapE) {\n        this.#mapEvent = mapE;\n        form.classList.remove(\"hidden\");\n        inputDistance.focus();\n    }\n    _hideForm() {\n        debugger;\n        // Empty inputs\n        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = \"\";\n        form.style.display = \"none\";\n        form.classList.add(\"hidden\");\n        setTimeout(()=>form.style.display = \"grid\", 1000);\n    }\n    _toggleElevationField() {\n        inputElevation.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n        inputCadence.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n    }\n    _newWorkout(e) {\n        const validInputs = (...inputs)=>inputs.every((inp)=>Number.isFinite(inp));\n        const allPositive = (...inputs)=>inputs.every((inp)=>inp > 0);\n        e.preventDefault();\n        // Get data from form\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n        const { lat, lng } = this.#mapEvent.latlng;\n        let workout;\n        // If workout running, create running object\n        if (type === \"running\") {\n            const cadence = +inputCadence.value;\n            // Check if data is valid\n            if (// !Number.isFinite(distance) ||\n            // !Number.isFinite(duration) ||\n            // !Number.isFinite(cadence)\n            !validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return alert(\"Inputs have to be positive numbers!\");\n            workout = new Running([\n                lat,\n                lng\n            ], distance, duration, cadence);\n        }\n        // If workout cycling, create cycling object\n        if (type === \"cycling\") {\n            const elevation = +inputElevation.value;\n            if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return alert(\"Inputs have to be positive numbers!\");\n            workout = new Cycling([\n                lat,\n                lng\n            ], distance, duration, elevation);\n        }\n        // Add new object to workout array\n        this.#workouts.push(workout);\n        // Render workout on map as marker\n        this._renderWorkoutMarker(workout);\n        // Render workout on list\n        this._renderWorkout(workout);\n        // Hide form + clear input fields\n        this._hideForm();\n        // Set local storage to all workouts\n        this._setLocalStorage();\n    }\n    _renderWorkoutMarker(workout) {\n        L.marker(workout.coords).addTo(this.#map).bindPopup(L.popup({\n            maxWidth: 250,\n            minWidth: 100,\n            autoClose: false,\n            closeOnClick: false,\n            className: `${workout.type}-popup`,\n            riseOnHover: true\n        })).setPopupContent(`${workout.type === \"running\" ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"} ${workout.description}`).openPopup();\n    }\n    _renderWorkout(workout) {\n        let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description} </h2> \n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === \"running\" ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"}</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{23F1}</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n        if (workout.type === \"running\") html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{1F9B6}\\u{1F3FC}</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span><span class=\"material-icons\" value=\"${workout.id}\" id=\"deletebtn\">close</span>\n        </div>\n      </li>\n      `;\n        if (workout.type === \"cycling\") html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26F0}</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span><span class=\"material-icons\" id=\"deletebtn\">close</span>\n        </div>\n      </li>\n      `;\n        form.insertAdjacentHTML(\"afterend\", html);\n    }\n    _moveToPopup(e) {\n        // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\n        if (!this.#map) return;\n        const workoutEl = e.target.closest(\".workout\");\n        if (!workoutEl) return;\n        const workout = this.#workouts.find((work)=>work.id === workoutEl.dataset.id);\n        // this.#map.setView(workout.coords, this.#mapZoomLevel, {\n        //   animate: true,\n        //   pan: {\n        //     duration: 1,\n        //   },\n        // });\n        this.#map.flyTo(workout.coords, this.#mapZoomLevel, {\n            animate: true,\n            pan: {\n                duration: 25\n            }\n        });\n    // using the public interface\n    // workout.click();\n    }\n    _setLocalStorage() {\n        localStorage.setItem(\"workouts\", JSON.stringify(this.#workouts));\n    }\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem(\"workouts\"));\n        if (!data) return;\n        this.#workouts = data;\n        this.#workouts.forEach((work)=>{\n            this._renderWorkout(work);\n        });\n    }\n    _DeleteWorkout(e) {\n        debugger;\n        for(let i = 1; i < containerWorkouts.children.length; i++)if (Number(containerWorkouts.children[i].attributes[\"data-id\"].value) === Number(e.target.parentElement.parentElement.attributes[\"data-id\"].value)) containerWorkouts.children[i].remove();\n        var layer = L.marker(latlng).addTo(map);\n        layer.addTo(map);\n        layer.remove();\n    }\n    reset() {\n        localStorage.removeItem(\"workouts\");\n        location.reload();\n    }\n}\nconst app = new App();\n\n//# sourceMappingURL=index.44e41940.js.map\n","'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    // this.date = ...\n    // this.id = ...\n    this.coords = coords; // [lat, lng]\n    this.distance = distance; // in km\n    this.duration = duration; // in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]\n      } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling';\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n\n///////////////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\nconst closeformbtn = document.getElementById('delete');\nconst DeleteAllWorkouts = document.getElementById('DeleteALL');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    // Get user's position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getLocalStorage();\n\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n    closeformbtn.addEventListener('click', this._hideForm.bind(this));\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n      debugger;\n      const deleteEle = document.querySelectorAll('#deletebtn')\n      deleteEle.forEach((x) => {\n        x.addEventListener('click', this._DeleteWorkout.bind(this))\n      })\n\n\n    })\n\n\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    debugger;\n    // Empty inputs\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    // If workout running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      // Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Add new object to workout array\n    this.#workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide form + clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n          riseOnHover: true,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description} </h2> \n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n      }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span><span class=\"material-icons\" value=\"${workout.id}\" id=\"deletebtn\">close</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span><span class=\"material-icons\" id=\"deletebtn\">close</span>\n        </div>\n      </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\n    if (!this.#map) return;\n\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    // this.#map.setView(workout.coords, this.#mapZoomLevel, {\n    //   animate: true,\n    //   pan: {\n    //     duration: 1,\n    //   },\n    // });\n\n    this.#map.flyTo(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 25,\n      },\n    });\n\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  _DeleteWorkout(e) {\n    debugger;\n    for (let i = 1; i < containerWorkouts.children.length; i++) {\n      if (Number(containerWorkouts.children[i].attributes['data-id'].value) === Number(e.target.parentElement.parentElement.attributes['data-id'].value)) {\n        containerWorkouts.children[i].remove();\n      }\n    }\n\n    var layer = L.marker(latlng).addTo(map);\n    layer.addTo(map);\n    layer.remove();\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","_setDescription","description","type","toUpperCase","months","getMonth","getDate","click","Running","cadence","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","closeformbtn","getElementById","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","_hideForm","deleteEle","querySelectorAll","forEach","x","_DeleteWorkout","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","map","setView","tileLayer","attribution","addTo","on","_showForm","work","_renderWorkoutMarker","mapE","classList","remove","focus","value","style","display","add","setTimeout","closest","toggle","e","workout","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","riseOnHover","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","flyTo","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","i","children","length","attributes","parentElement","layer","reset","removeItem","location","reload"],"version":3,"file":"index.44e41940.js.map"}